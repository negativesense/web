{"ast":null,"code":"'use strict';\n\nconst isIp = require('is-ip');\nconst defaults = {\n  timeout: 5000\n};\nconst urls = {\n  v4: ['https://ipv4.icanhazip.com/', 'https://api.ipify.org/'],\n  v6: ['https://ipv6.icanhazip.com/', 'https://api6.ipify.org/']\n};\nlet xhr;\nconst sendXhr = async (url, options, version) => {\n  return new Promise((resolve, reject) => {\n    xhr = new XMLHttpRequest();\n    xhr.addEventListener('error', reject, {\n      once: true\n    });\n    xhr.addEventListener('timeout', reject, {\n      once: true\n    });\n    xhr.addEventListener('load', () => {\n      const ip = xhr.responseText.trim();\n      if (!ip || !isIp[version](ip)) {\n        reject();\n        return;\n      }\n      resolve(ip);\n    }, {\n      once: true\n    });\n    xhr.open('GET', url);\n    xhr.timeout = options.timeout;\n    xhr.send();\n  });\n};\nconst queryHttps = async (version, options) => {\n  let ip;\n  const urls_ = [].concat.apply(urls[version], options.fallbackUrls || []);\n  for (const url of urls_) {\n    try {\n      // eslint-disable-next-line no-await-in-loop\n      ip = await sendXhr(url, options, version);\n      return ip;\n    } catch (_) {}\n  }\n  throw new Error('Couldn\\'t find your IP');\n};\nqueryHttps.cancel = () => {\n  xhr.abort();\n};\nmodule.exports.v4 = options => queryHttps('v4', {\n  ...defaults,\n  ...options\n});\nmodule.exports.v6 = options => queryHttps('v6', {\n  ...defaults,\n  ...options\n});","map":null,"metadata":{},"sourceType":"script"}